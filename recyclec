#!/usr/bin/env node
"use strict"

let
  Rx= require("rx"),
  Cycle= require("@cycle/core"),
  RxNode= require("rx-node"),
  ttys= require("ttys"),
  linestream= require("line-stream")

process.stdin.setEncoding("utf8")

// source: input (read) effects
// sink: output (write) effecs, 
// - _Generalizing run() fn_ video

// take sink (to describe write), 
// return souces (to catch reads), 
// - https://cycle.js.org/drivers
function lineDriver(output){
	output.subscribe(l=> {
			process.stdout.write(l, "utf8")
		}, null, ()=> process.stdout.end())
	let
	  lines= linestream(),
	  input= RxNode.fromTransformStream(lines)
	process.stdin.pipe(lines)
	return input
}

function transformMain(sources){
	let
	  transform= require(process.argv[2]),
	  input= sources.line,
	  output= input.selectMany(line => transform(line))
	return {
		line: output
	}
}

function runTransform(){
	Cycle.run(transformMain, { line: lineDriver })
}

module.exports.lineDriver= lineDriver
module.exports.transformMain= transformMain
module.exports.runTransform = runTransform

if(require.main === module){
	setTimeout(()=> module.exports.runTransform(), 0)
}
