#!/usr/bin/env node
"use strict"

let
  Rx= require("rx"),
  Cycle= require("@cycle/core"),
  RxNode= require("rx-node"),
  ttys= require("ttys"),
  linestream= require("line-stream")

process.stdin.setEncoding("utf8")

// source: input (read) effects
// sink: output (write) effecs, 
// - _Generalizing run() fn_ video

// take sink (to describe write), 
// return souces (to catch reads), 
// - https://cycle.js.org/drivers
function makeLineDriver(opts){
	let	
	  stdout= opts && opts.stdout || process.stdout,
	  stdin= opts && opts.stdin || process.stdin,
	  lines= linestream(),
	  input= RxNode.fromTransformStream(lines)
	stdin.setEncoding("utf8")
	stdin.setDefaultEncoding("utf8")
	stdin.pipe(lines)
	return function lineDriver(output){
		RxNode.writeToStream(output, stdout)
		return input
	}
}

function transformMain(sources){
	let
	  transform= require(process.argv[2]),
	  input= sources.line,
	  output= input.selectMany(line => transform(line))
	return {
		line: output
	}
}
function runTransform(){
	Cycle.run(transformMain, {
		line: makeLineDriver()
	})
}


function interactiveMain(sources){
	ttys.stdout.setDefaultEncoding("utf8")
	let
	  transform= require(process.argv[2]),
	  input= sources.line,
	  term= sources.term,
	  leadingTerm= Rx.Observable.of("y").concat(term),
	  output= input.map(line=> transform(line)),
	  questions= output.zip(input, leadingTerm).selectMany(line=> "-"+line[1]+"+"+line[0]),
	  filtered= output.zip(term).where(pair=> pair[1].toString() != "n\n").map(line=> line[0])
	return {
		term: questions,
		line: filtered
	}
}
function runInteractive(){
	Cycle.run(interactiveMain, {
		term: makeLineDriver(ttys),
		line: makeLineDriver()
	})
}

module.exports.makeLineDriver= makeLineDriver
module.exports.transformMain= transformMain
module.exports.runTransform = runTransform
module.exports.interactiveMain= interactiveMain
module.exports.runInteractive= runInteractive

if(require.main === module){
	setTimeout(()=> runInteractive())
}
